Tailwind?
CSS Framework => Ready made set of classes

Documentation

h-<px> => Height related classes
w-<px> => Width related classes
border-<px> => Border with thickness

1rem => 16px (Reference from HTML Tag)
1em => 16px (Reference from Parent Tag)

1 => 16px
2 => 32px
.....
n => 16n px

spacing => 0.25rem

1rem => 4 (x4)
2rem => 8 (x4)
3rem => 12 (x4)
4rem => 16 (x4)
....
.....


bordered-box => Border is included
content-box => Border is not included

sm => Small (640px)
md => Medium (768px)
lg => Large (1024px)
xl => Extra Large (1280px)
2xl => Double extra large (1536px)

md:border-2 => min md and above
lg:border-2 => min lg and above
---------------------------------------------------------------------------
16/09/2025
Padding -> Space between border and conten
p-<number> => All 4 sides
pl => Left
pt => Top
pr => Right
pb => Bottom
px => Horizontal
py => Vertcal

Margin -> Space outside the border and the parent/siblings

m-<number>
ml => Left
mt => Top
mr => Right
mb => Bottom
mx => Horizontal
my => Vertcal

Direction (languages)
ltr
rtl

Background
bg-<color>


aspect-ratio => 200:400 (1:2) [3:4, 19:6]

200x400 => 1:2
100x200 => 1:2
150x200 => 3:4


Layout

flexbox => 2d
grid => 3d
======================================================
18/09/2025

Small property about background
Flexbox => Horizontal and Vertical
Grid => Layout
Position =>
    static => Default
    realative 
    absolute => wrt 1. Parent (If parent is not static) 2. Browser (If parent is static)
    fixed => Always fixed at a position on web page
    sticky => Behaves liked fixed at a specific condition

GitHub => Google drive / One Drive / Dropbox
Deployment on Github pages


Google Drive / One Drive / Dropbox => Folder => Files & Docs & Images (Sharing with diff people)
GitHub/BitBucket/GitLab/Azure Repos/Google Repo  => Repository => Code (Sharing with diff people)

Git => Tool to use GitHub

index.html => 

Upload => Push
Download => Pull

1st time download => git clone
subsequent downloads => git pull
Push => 
    add => Inform git about the file/changes (git add .)
    commit => Write a message about what you changed. (git commit -m "<YOUR MESSAGE>")
    push => Upload the code to github/bitbucket etc (git push)

Hosting / Deployment => 
======================================================================
19-09-2025

RegEx

ES5 => ECMAScript v5
ES6 => ECMAScript v6

======================================================================
22-09-2025

Data types

Primitive => Basic/Fundamental
number
string
boolean
null
undefined

Non Primitive => Created with the help of primitve data types
Object
Array

Loop

for => When you know how many times the loop is going to run
while => When you don't know how many times the loop is going to run

Array methods

.forEach() => When you want to iterate over whole array and access every element easily
map() => When you want to return a new array from a given array
filter() => When you want to choose items based on condition
// userNames.reduce()
// userNames.find()


? => Ternary operator (Alternate of if else)
if(condition) {
    true block
} else {
    false block
}

(condition) ? true block : false block

======================================================================
23-09-2025

DOM (Document Object Model) => HTML Tree representation in JS (document)

html
    head
        script
        style
        meta
    body
        header
            nav
        section
            main
                article
                    p
                    img
                    h1
        footer

jQuery
React
Angular
Vue
etc...

======================================================================
25-09-2025

// Events => Any action/interaction happeing on DOM
click
load
unloading
focus
blur
scroll

DOM => load, unloading, scroll etc
Mouse => click, double click, mouseover, mouseout etc
Keyboard => keydown, keyup etc

Phases of Events
1. Capture (Top to bottom)
2. Target (Actually clicked element target)
3. Bubble (Bottom to top)

HTML -> Body -> Outer -> Middle -> Inner -> Button
======================================================================
26-09-2025

Computer => Programs => Process => Thread

Sync => Step by step execution
Async => Step by step execution with BG OPERATION ENBALED FOR TIME CONSUMING TASKS


Line 1 => console.log("Hello"); => 5ms
Line 2 => a+b => 5ms
Line 3 => func() {//calculation} => 7ms
Line 4 => network related operation => 2min (bg execution)
Line 5 => console.log("hey") => 3ms
Line 6 => x+y+z => 4ms
Line 7 => file read operation (video play) => 3min (bg execution)
Line 8 => a+b => 2ms
Line 9 
Line 10 


Async
setTimeout()
setInterval()
setImmediate() => Ignore
promise (VIMP Topic) => Something which will happen after some time
    States of a promise
        1. Pending
        2. Fulfilled
        3. Rejected

Promise -> Fulfilled / Resolved
Promise -> Rejected / Failed

API => Application Programing Interface

======================================================================
30-09-2025

Library => React (UI Library), jQuery (DOM Manipulation)
Framework => Angular, Nextjs

Nextjs -> Reactjs -> Js

React? JS Library 
2013, Facebook 
1. Fast (Performance Oriented)
2. Easy to learn

ReactJS v1.... v19

Vanilla JS => Actual/Real DOM
React JS => Virtual DOM (Binary Tree)

JSX (JavaScript & XML) => React's own way of writing code
JSX => Browser doesn't understands

Split code into as smaller units as possible/No repetition of code / Split code / Write once, use many times
Header.jsx
Footer.jsx
Section.jsx
Links.jsx

Bundling => script.js

Conversion : JSX -> JS
Babel Compiler / Transpiler: JSX Input -> JS Output

Pre requisits for ReactJS
Learning
    1. JSX
Execution
    1. Babel
    2. Webpack
    3. Live Server / (HMR) Hot Module Reload

NodeJS => JavScrit Runtime Environment

JDK =>  Java Dev Kit
JRE =>  Java Runtime Environment

CLI => Command Line Interface
GUI => Graphical User Interface

Boilerplate => Basic folder & files configured to work with any technology/library/framework.


To run project from my github
git pull/download
go to project folder
npm install / npm i
npm run dev

======================================================================
06-10-2025


Rules of writing React Code
1. Component name must start with a capital letter.
2. Closing of a tag/component is mandatory in react
    <img></img>
    <img />
3. A react component generally returns HTML.

function => component
arguments/parameters => Props (Properties)

======================================================================
07-10-2025

Render => Show

Conditional statements in react JSX
Conditional Rendering
Ternary Operator (?) => (condition) ? true-stmt : false-stmt (if-else stmt)
And Operator (&&) => (condition) && true-stmt (if stmt)


useState =>
let [variable-name, updater-fn] = useState(init-value);

Synthetic events => Wrapper over normal js events (Cross browser compatability)

Types of components in React
1. Class based components : Older
2. Functional components : Newer

======================================================================
09-10-2025

useEffect(callback-fn, dep-array); => If the value inside dep-array changes, it triggers callback-fn

useEffect(callback-fn, []) => componentDidMount() --> 1
useEffect(callback-fn) => componentDidUpdate() --> n
useEffect(() => {
    return fn; // Return fn -> componentWillUnmount() --> 1
},[])

======================================================================
10-10-2025
1xx
2xx => Successful (200,201,204)
3xx => Redirection
4xx => Client Error (400, 404)
5xx => Server error (500, 502, 503)

API => URL & Method
URL/EndPoint => https://abc.com/user
Method => 
GET => Get the data from server (E.g get list of tods, get list of products, get list of users, get product details)
POST => Send data to the server (E.g user registration, login, enquiry forms, placing an order on ecomm)
PUT
PATCH
DELETE

GET /todos-list
POST /login

Routing
1. Client side
2. Server side => next.js

======================================================================
13-10-2025

/product-name/dp
/product/product-name
/product/mobile
/product/headphones
/product/washing-machine
/product/<PRODUCT_NAME>

/product/<PRODUCT_ID>
/product/1
/product/2
/product/xyz


Dashboard => Reactjs
User Facing Site => Nextjs

SSG (Static Site Generation)
ISR (Incremental Static Rendering)